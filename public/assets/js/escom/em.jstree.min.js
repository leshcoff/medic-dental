EMJsTree = function(options){
    this.MODULE_URL  = options.module_url;
    
    this.oJsTree     = null;
    this.toolbar     = null;
    this.winModal    = null;
}

EMJsTree.prototype = {

    config : function() {
        if ( $.isFunction( $.fn[ 'jstree' ] ) ) {
            $.extend(true, $.fn.jstree.defaults, { });
        }
    },

    getURL:function() {
        return this.MODULE_URL;
    },

    setJsTree : function(tree){
        this.oJsTree = tree;
    },

    getJsTree : function(){
        return this.oJsTree;
    },

    setToolbar : function(toolbar){
        this.toolbar = toolbar;
    },

    getToolbar : function(){
        return this.toolbar;
    },

    /*---------------------------------------------------------------------------------------------------------
     * DIALOG PRINCIPAL - new, edit, delete
     *--------------------------------------------------------------------------------------------------------*/
    openModal : function(options){
        var modal     = new EMModal();
        this.winModal = modal.Open( options );
    },

    reload : function(){
        $('button ', this.getToolbar() ).removeClass('btn-primary').addClass('btn-default').prop('disabled', true)
        this.getJsTree().jstree('refresh');
    },

    reloadTree : function(){
        this.reload();
    },

    move : function( params ){
        $this = this
        EMAlerts.confirmCancel({
            title       : 'Mover ',
            message     : '¿Desea mover ' + params.label + ' ?',
            confirmText : 'Mover',
            cancelText  : 'Cancelar',
            callback    : function(){
                $this.moveNodeRequest(params, function( message ){
                    EMAlerts.success({
                        title   : 'Éxito',
                        message : message || 'Se han realizado los cambios'
                    });
                    $this.reloadTree();
                });
            },
        });
        return false;
    },

    moveNodeRequest: function ( params, callback ) {

        $this = this;
        
        $.ajax({
            url     : this.getURL() + '/do-post',
            type    : 'POST',
            async   : true,
            cache   : false,
            data    : params,
            success: function (data, textStatus, jqXHR) {
                var json = App.handleResponse(jqXHR.responseText, jqXHR.status);
                
                if(!json) return false;
                
                if(callback != null) callback( json.data.message );
               
            },
            error: function (xhr) {
                App.handleResponse(xhr.responseText, xhr.status);
            }
        });
    },

    delete : function( params ){
        $this = this;

        if( params.params.node == undefined ){
            EMAlerts.error({
                title   :  'Ha sucedido un error',
                message :  'Elija un elemento'
            });
            return false;
        }

        params.params.doAction = '3';

        $this.confirmDelete( params, 'Eliminar', function(){
            $this.deleteElement(params.params, function( message ){
                EMAlerts.success({
                    title   : 'Éxito',
                    message :  message || ' Eliminación exitosa'
                });
                $this.reloadTree();
            });
        });


    },

    confirmDelete: function (params, data, callback ) {
        $this = this;
        EMAlerts.confirmCancel({
            title       :  'Eliminar ' + params.label,
            html        :  data.message,
            message     :  '¿ Deseas eliminar definitivamente ' + params.label + ' ?',
            confirmText :  'Eliminar',
            callback    :  callback
        });
    },

    deleteElement: function ( params, callback ) {

        $this = this;
        params.doAction = 3

        $.ajax({
            url     : this.getURL() + '/do-post',
            type    : 'POST',
            async   : true,
            cache   : false,
            data    : params,
            success : function (data, textStatus, jqXHR) {
                var json = App.handleResponse(jqXHR.responseText, jqXHR.status);
                if(!json) return false;
                
                if( callback != null){
                    callback( json.data.message );
                }
                
            },
            error: function (xhr) {
                App.handleResponse(xhr.responseText, xhr.status);
            }
        });
    }

};