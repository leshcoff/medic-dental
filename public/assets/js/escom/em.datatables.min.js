EMGrid = function(options){
    this.CONTROLLER  = options.controller
    this.MODULE_NAME = options.module_name;
    this.MODULE_URL  = options.module_url;
    this.TABLE_NAME  = options.table_name;
    this.TARGET      = options.target;

    this.oTable     = null;
    this.columns    = {};
    this.toolbar    = null;
    this.index      = null;
    this.winModal   = null;
    this.winFilter  = null;

    this.getNames = function(){

    }
}

EMGrid.prototype = {

    config : function() {


    },


    getController:function() {
        return this.CONTROLLER;
    } ,

    getModule:function() {
        return this.MODULE_NAME;
    } ,

    getURL:function() {
        return this.MODULE_URL;
    },

    getIndex : function(){
        return this.index;
    },

    getTable : function (){
        return this.TABLE_NAME;
    },

    /*---------------------------------------------------------------------------------------------------------
     * Creación Jquery DataTable v10.6
     *--------------------------------------------------------------------------------------------------------*/
    /**
     *
     * @param cols
     */

    grid : function(parametros){


    },



    /*---------------------------------------------------------------------------------------------------------
     * FUNCIONES DE Jquery DataTable v10.6
     *--------------------------------------------------------------------------------------------------------*/
    /**
     *
     * @param cols
     */
    setColumns : function(cols){
        this.columns = cols;
    },

    getColumns : function(){
        return this.columns;
    },


    setToolbar : function(tolbar){
        this.toolbar = toolbar;
    },

    getToolbar : function(){
        return this.toolbar;
    },

    getSelected: function () {
        return this.oTable.rows('.selected').data()[0];
    },

    selectByIndex : function(){
        return this.oTable.rows('.selected').data()[0];
    },

    getDataTable : function(){
        return this.oTable;
    },

    setTableName : function(name) {
        this.TABLE_NAME = name;
    },

    setContainer : function(item){

    },

    /*---------------------------------------------------------------------------------------------------------
     * DIALOG PRINCIPAL - new, edit, delete
     *--------------------------------------------------------------------------------------------------------*/
    openModal: function (options) {


        if(! this.winModal )
        {
            this.winModal = new EMModal();
            this.winModal.Open(options);
            return this.winModal;
        }
        else
        {
            this.winModal.load(options);
            this.winModal.modal.data("kendoWindow").open();

        }

    },

    getModal  : function () {
        // Using same window variable again and again for successive clicks with dynamic content
        var nWin = this.winModal;

        return nWin;
    },

    closeModal : function () {
        this.winModal.modal.data("kendoWindow").close();
    },


    setModalOptions : function(options){
        // Using same window variable again and again for successive clicks with dynamic content
        var nWin = this.winModal.modal.data("kendoWindow")

        // Setting some options
        nWin.setOptions(options);

        return nWin;
    },


    openPreview: function (options, form) {
        var modal     = new EMModal();
        this.winModal = modal.OpenPreview(options, form);
    },

    /* Abre un modal para descargar un formulario con los  criterios de busqueda
     *---------------------------------------------------------------------------------------------------------
     * DIALOG PARA DESPLEGAR FILTROS
     *--------------------------------------------------------------------------------------------------------*/
    openFilter : function(opt){

        var $this       = this;
        var options     = opt||{}
        var elModal     = options.modal||'#filter-modal';
        var url         = options.url ||'/data-table-form';

        //instanceamos la ventana del filtro
        if(this.winFilter == null)
        {

            this.winFilter = new EMModal();
            this.winFilter.mFilter(options, $this);
            return this.winFilter;

            //var modal       = new EMModal();
            //this.winFilter = modal.mFilter(options, $this);
            //console.log(winFilter)
        }
        else
        {
            this.winFilter.modal.data("kendoWindow").open();
        }
    },

    setModalFilterOptions : function(options){
        // Using same window variable again and again for successive clicks with dynamic content
        var nWin = this.winFilter.modal.data("kendoWindow")

        // Setting some options
        nWin.setOptions(options);

        return nWin;
    },

    getModalFilter  : function () {
        // Using same window variable again and again for successive clicks with dynamic content
        var nWin = this.winFilter;

        return nWin;
    },

    closeModalFilter : function () {
        this.winFilter.modal.data("kendoWindow").close();
    },





    moveUp : function(){


    },

    moveDown : function() {

    },

    reload : function(){
        this.getDataTable().draw();
    },

    reloadTree : function(){
        this.tree();
    },


    confirmDelete: function (params) {
        var $this = this;
        var options = {
            'CONTROLLER': this.getController(),
            'MODULE'    : this.getModule(),
            'doAction'  : 'delete',
            'rowid'     : params.rowid
        }

        if(params.rowid == undefined){
            EMAlerts.error({
                title   :  "Error",
                message : "Debes de elegir un registro"
            });

            return false;
        }

        if (params.rowid == '' || params.rowid.lenght ==0 ) {
            EMAlerts.error({
                title   :  "Error",
                message :  "Por favor debes de seleccionar un registro"
            });
            return false;
        }

        EMAlerts.confirmCancel({
            title   :  "Eliminar Registro",
            message :  "¿ Deseas eliminar definitivamente el Registro(s) *** ",
            confirmText : "Eliminar",
            callback   : function(){
                $this.deleteRow(params);
            }
        });

    },

    confirmAuthorize: function (params) {
        var $this = this;
        var options = {
            'CONTROLLER': this.getController(),
            'MODULE'    : this.getModule(),
            'doAction'  : 'delete',
            'rowid'     : params.rowid
        }

        if(params.rowid == undefined){
            EMAlerts.error({
                title   :  "Error",
                message : "Debes de elegir un registro"
            });

            return false;
        }

        if (params.rowid == '' || params.rowid.lenght ==0 ) {
            EMAlerts.error({
                title   :  "Error",
                message :  "Por favor debes de seleccionar un registro"
            });
            return false;
        }

        EMAlerts.confirmCancel({
            title   :  "Autorizar Registro",
            message :  "¿ Deseas Autorizar el Registro(s) *** ",
            confirmText : "Autorizar definitivamente",
            callback   : function(){
                $this.deleteRow(params);
            }
        });

    },


    deleteRow: function (obj) {

        $this = this;

        $.ajax({
            url		:  this.getURL() +"/do-post",
            type	: 'POST',
            async	: true,
            cache   : false,
            data    : obj,
            success: function (data, textStatus, jqXHR) {
                var json = App.handleResponse(jqXHR.responseText, jqXHR.status);
                if(!json) return false;

                $this.reload();
            },
            error: function (xhr) {
                App.handleResponse(xhr.responseText, xhr.status);
            }
        });
    },

    remove : function(){

    },

    tree : function(){
        location.reload(true);
    }
};
